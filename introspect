#!/usr/bin/env Rscript --vanilla

suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(optparse))
suppressPackageStartupMessages(library(readr))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(tidyr))

# -- globals -------------------------------------------------------------------

option_list <- list(
  make_option(c("-H", "--height"), type = "double", default = 11,
              help = "height of the output plot [%default]"),
  make_option(c("-W", "--width"), type = "double", default = 8.5,
              help = "width of the output plot [%default]"),
  make_option(c("-d", "--date-format"), default = "%b %y",
              help = "format of the x-axis time labels [%default]"),
  make_option(c("-f", "--format"), default = "pdf",
              help = "the plot output format [%default]"),
  make_option(c("-g", "--grey"), action = "store_true", default = FALSE,
              help = "use grey scale instead of colors [%default]"),
  make_option(c("-i", "--input-dir"), default = file.path(getwd(), "input"),
              help = "the path to input data [%default]"),
  make_option(c("-o", "--output-dir"), default = file.path(getwd(), "output"),
              help = "the path to input data [%default]"),
  make_option(c("-u", "--unit"), default = "in",
              help = "the unit for width and height [%default]"),
  make_option(c("-h", "--help"), action = "store_true", default = FALSE,
              help = "display this help and exit")
)

opts <- parse_args(OptionParser(option_list = option_list,
                                add_help_option = FALSE))

# Reference interval describing normal values. The first two values represents
# minimum and maximum, and the third value the unit.
# (list names must correspond to column names in data files)
reference <- list(
  # CBC
  WBC = list(3, 10, "10^3/mu*l"),
  RBC = list(4.1, 5.9, "10^6/mu*l"),
  Hemoglobin = list(13, 18, "g/dl"),
  Hematocrit = list(37.5, 51, "\"%\""),
  MCV = list(79, 97, "fl"),
  MCH = list(26.6, 33.0, "fl"),
  MCHC = list(31.5, 35.7, "pg"),
  RDW = list(12.3, 15.4, "\"%\""),
  Platelets = list(150, 379, "10^3/mu*l"),
  # CMP
  Glucose = list(65, 99, "mg/dl"),
  BUN = list(6, 20, "mg/dl"),
  Creatinine = list(0.76, 1.27, "mg/dl"),
  eGFR = list(59, NA, "ml/min/1.73"),
  `BUN/Creatinine` = list(9, 20, ""),
  Sodium = list(134, 144, "mmol/l"),
  Potassium = list(3.5, 5.2, "mmol/l"),
  Chloride = list(96, 106, "mmol/l"),
  CO2 = list(18, 29, "mmol/l"),
  Calcium = list(8.7, 10.2, "mg/l"),
  Protein = list(6.0, 8.5, "g/l"),
  Albumin = list(3.5, 5.5, "g/l"),
  Globulin = list(1.5, 4.5, "g/l"),
  `A/G` = list(1.2, 2.2, ""),
  Bilirubin = list(0.0, 1.2, "mg/l"),
  ALP = list(39, 177, "IU/l"),
  AST = list(0, 40, "IU/l"),
  ALT = list(0, 44, "IU/l"),
  # Lipid
  Cholesterol = list(100, 199, "mg/dl"),
  HDL = list(39, NA, "mg/dl"),
  VLDL = list(5, 40, "mg/dl"),
  LDL = list(0, 99, "mg/dl"),
  Triglycerides = list(0, 149, "mg/dl")
)

# The theme we use for all plots.
theme_introspect <- theme_minimal() +
  theme(
    plot.margin = margin(0, 0, 0, 0),
    plot.title = element_text(size = 10, hjust = 0.5,
                              margin = margin(t = 5, b = 0)),
    text = element_text(size = 8),
    legend.text = element_text(size = 6),
    legend.title = element_blank(),
    axis.text = element_text(size = 6),
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, debug = FALSE),
    axis.ticks.x = element_line(size = 0.25),
    axis.title.x = element_blank(), # always a date
    axis.title.y = element_text(margin = margin())
  )

# ------------------------------------------------------------------------------

# Plots a specific lab value and highlights outliers.
plot.value <- function(data, aspect) {
  ref <- reference[[aspect]]
  if (is.null(ref))
    stop("missing reference data")
  # Figure out whether we have a one-sided or two-sided reference interval.
  filt_expr <- NULL
  ref_min <- min(data[[aspect]], na.rm = TRUE)
  ref_max <- max(data[[aspect]], na.rm = TRUE)
  #filt_expr <- paste(aspect, '<', ref[[1]], '|', aspect, '>', ref[[2]])
  quoted_aspect = paste0('`', aspect, '`')
  if (!is.na(ref[[1]])) {
    filt_expr <- c(paste(quoted_aspect, '<', ref[[1]]))
    ref_min <- ref[[1]]
  }
  if (!is.na(ref[[2]])) {
    filt_expr <- c(filt_expr, paste(quoted_aspect, '>', ref[[2]]))
    ref_max <- ref[[2]]
  }
  filt_expr <- do.call(paste, c(as.list(filt_expr), sep = " | "))
  outliers <- data %>% filter_(filt_expr)
  data %>%
    drop_na_(aspect) %>%
    ggplot(aes_string(x = "Date", y = quoted_aspect)) +
      geom_rect(aes(xmin = min(data$Date), xmax = max(data$Date),
                    ymin = ref_min, ymax = ref_max),
                alpha = 0.03, fill = "forestgreen") +
      geom_line() +
      geom_point() +
      geom_point(data = outliers, color = "red", size = 2) +
      scale_x_date(labels = date_format(opts$`date-format`)) +
      ylab(parse(text = ref[[3]])) +
      ggtitle(aspect) +
      theme_introspect
}

# Plots white blood cell composition.
plot.wbc.diff <- function(data) {
  data %>%
    select(Date, Neutrophils, Lymphs, Monocytes, Eos, Basos) %>%
    gather(key, value, -Date) %>%
    ggplot(aes(x = Date, y = value, fill = key)) +
      geom_area(position = "stack") +
      ylab("%") +
      scale_x_date(labels = date_format(opts$`date-format`)) +
      ggtitle("WBC Differential") +
      theme_introspect
}

# Plots cholesterol as stacked area.
plot.cholesterol <- function(data) {
  data %>%
    select(Date, HDL, VLDL, LDL) %>%
    gather(key, value, -Date) %>%
    ggplot(aes(x = Date, y = value,
               fill =factor(key, levels = c("HDL", "VLDL", "LDL")))) +
      geom_area(position = "stack") +
      #geom_hline(aes(yintercept = 199), color = "red", linetype = "dashed") +
      ylab("mg/dl") +
      scale_x_date(labels = date_format(opts$`date-format`)) +
      ggtitle("Cholesterol") +
      theme_introspect
}

# Plots a Complete Blood Count (CBC) with differential.
plot.cbc <- function(filename) {
  cbc <- suppressMessages(read_table2(filename))
  row1 <- plot_grid(plot.value(cbc, "WBC"),
                    plot.wbc.diff(cbc),
                    rel_widths = c(1, 2))
  row2 <- plot_grid(plot.value(cbc, "RBC"),
                    plot.value(cbc, "Hemoglobin"),
                    plot.value(cbc, "Hematocrit"),
                    nrow = 1)
  row3 <- plot_grid(plot.value(cbc, "MCV"),
                    plot.value(cbc, "MCH"),
                    plot.value(cbc, "MCHC"),
                    plot.value(cbc, "RDW"),
                    nrow = 1)
  row4 <- plot.value(cbc, "Platelets")
  red <- plot_grid(row2, row3, ncol = 1)
  final <- plot_grid(row1, red, row4, scale = 0.9, ncol = 1,
                     rel_heights = c(1, 2, 1))
  ggdraw() +
    draw_plot(final, 0, 0, 1, 0.9) +
    draw_label("Complete Blood Count", fontface = "bold", size = 18,
               x = 0.5, y = 1, vjust = 3) +
    draw_label("White Blood Cells", fontface = "bold",
               x = 0.05, y = 0.905, hjust = 0) +
    draw_label("Red Blood Cells", fontface = "bold",
               x = 0.05, y = 0.67, hjust = 0) +
    draw_label("Platelets", fontface = "bold",
               x = 0.05, y = 0.23, hjust = 0)
}

# Plots a Complete Metabolic Panel (CMP).
plot.cmp <- function(filename) {
  cmp <- suppressMessages(read_table2(filename))
  row1 <- plot_grid(plot.value(cmp, "Glucose"),
                    plot.value(cmp, "Calcium"),
                    nrow = 1)
  row2 <- plot_grid(plot.value(cmp, "Sodium"),
                    plot.value(cmp, "Potassium"),
                    plot.value(cmp, "Chloride"),
                    plot.value(cmp, "CO2"),
                    nrow = 1)
  row3 <- plot_grid(plot.value(cmp, "BUN"),
                    plot.value(cmp, "Creatinine"),
                    plot.value(cmp, "BUN/Creatinine"),
                    plot.value(cmp, "eGFR"),
                    nrow = 1)
  row4 <- plot_grid(plot.value(cmp, "ALT"),
                    plot.value(cmp, "AST"),
                    plot.value(cmp, "ALP"),
                    plot.value(cmp, "Bilirubin"),
                    plot.value(cmp, "Protein"),
                    plot.value(cmp, "Albumin"),
                    plot.value(cmp, "Globulin"),
                    plot.value(cmp, "A/G"),
                    nrow = 2, ncol = 4)
  final <- plot_grid(row1, row2, row3, row4, scale = 0.9, ncol = 1,
                     rel_heights = c(1, 1, 1, 2))
  ggdraw() +
    draw_plot(final, 0, 0, 1, 0.9) +
    draw_label("Comprehensive Metabolic Panel", fontface = "bold", size = 18,
               x = 0.5, y = 1, vjust = 3.5) +
    draw_label("Electrolytes", fontface = "bold",
               x = 0.05, y = 0.72, hjust = 0) +
    draw_label("Kidney", fontface = "bold",
               x = 0.05, y = 0.54, hjust = 0) +
    draw_label("Liver", fontface = "bold",
               x = 0.05, y = 0.35, hjust = 0)
}

# Plots the entire lipid panel
plot.lipid <- function(filename) {
  lipid <- suppressMessages(read_table2(filename))
  # Create rows.
  row1 <- plot_grid(plot.value(lipid, "Cholesterol"),
                    plot.cholesterol(lipid),
                    rel_widths = c(1, 2))
  row2 <- plot_grid(plot.value(lipid, "HDL"),
                    plot.value(lipid, "VLDL"),
                    plot.value(lipid, "LDL"), nrow = 1)
  row3 <- plot.value(lipid, "Triglycerides")
  # Compose.
  top <- plot_grid(row1, row2, ncol = 1)
  plot_grid(row1, row2, ncol = 1)
  bot <- row3
  final <- plot_grid(top, bot, scale = 0.9, ncol = 1, rel_heights = c(2, 1))
  ggdraw() +
    draw_plot(final, 0, 0, 1, 0.9) +
    draw_label("Lipid Panel", fontface = "bold", size = 18,
               x = 0.5, y = 1, vjust = 3) +
    draw_label("Cholesterol", fontface = "bold",
               x = 0.05, y = 0.9, hjust = 0) +
    draw_label("Triglycerides", fontface = "bold",
               x = 0.05, y = 0.3, hjust = 0)
}

# -- main ----------------------------------------------------------------------

input <- function(x) file.path(opts$`input-dir`, paste0(x, ".txt"))
output <- function(x) file.path(opts$`output-dir`, paste0(x, ".", opts$format))
generate <- function(name, plot_fun) {
  if (file.exists(input(name))) {
    message("Generating ", opts$format, " for ", input(name))
    if (!dir.exists(opts$`output-dir`))
      dir.create(opts$`output-dir`)
    ggsave(output(name), plot_fun(input(name)),
           height = opts$height, width = opts$width, units = opts$unit)
  }
}

main <- function() {
  generate("cbc", plot.cbc)
  generate("cmp", plot.cmp)
  generate("lipid", plot.lipid)
}

if (!interactive())
  main()

# vim: ft=R
